# -- Dotfiles Directory --------------------------------------------------------
export XDG_CONFIG_HOME="$HOME/.config"
export DOTFILES="$HOME/.dotfiles"

# Helper scripts
source "$DOTFILES/scripts/helpers/functions.sh"

# -- Set up $PATH --------------------------------------------------------------
[[ ":$PATH:" == *":$/usr/local/bin:"* ]] || PATH="/usr/local/bin:$PATH"

# -- Local Configuration (Before Default) --------------------------------------
if [[ -f "$DOTFILES/zsh/zshrc.local.pre" ]]; then
  source $DOTFILES/zsh/zshrc.local.pre
fi

# -- Zsh -----------------------------------------------------------------------
ZSH="$HOME/.oh-my-zsh"
ZSH_CUSTOM="$DOTFILES/zsh/custom"
fpath=( "$DOTFILES/zsh/custom" $fpath)

# -- oh-my-zsh ---------------------------------------------------------------

# Configure `vi-mode` plugin
MODE_INDICATOR=" "

# Set plugins
plugins=(git tmux npm bower vi-mode pj zsh-syntax-highlighting)
if exists "virtualenvwrapper"; then plugins+=virtualenvwrapper; fi

fpath=($DOTFILES/zsh/custom/completion $fpath)

# Add Homebrew completions to config if they can be found
if exists "brew"; then
  local brew_completions="$(brew --prefix)/share/zsh/site-functions"
  if [[ -d $brew_completions ]]; then
    fpath=($fpath $brew_completions)
  fi
fi

# Disable oh-my-zsh theme; using Pure instead
ZSH_THEME=""

source $ZSH/oh-my-zsh.sh

# -- Theme ---------------------------------------------------------------------
export NVIM_TUI_ENABLE_TRUE_COLOR=1

# Configuration from `pure` README
fpath+=("$DOTFILES/zsh/pure")
autoload -U promptinit; promptinit
prompt pure

# -- Named Directories ---------------------------------------------------------
unsetopt auto_name_dirs

# -- Completion Config ---------------------------------------------------------
zstyle ':completion:*:*:vim:*:*files' ignored-patterns '*.class'

# -- Command History -----------------------------------------------------------
export HISTSIZE=500
export SAVEHIST=500

# -- Options -------------------------------------------------------------------
unsetopt correct_all
unsetopt correct

# -- Variables -----------------------------------------------------------------
if [ "$TERM_PROGRAM" = "vscode" ]; then
  IS_VSCODE=1
else
  IS_VSCODE=
fi

if [ "$IS_VSCODE" ]; then
  export EDITOR="$(which code)"
else
  export EDITOR="$(which nvim)"
fi

# -- Aliases -------------------------------------------------------------------
if [[ -f "$DOTFILES/aliases" ]]; then
  source $DOTFILES/aliases
fi

if [[ -f "$HOME/.aliases" ]]; then
    source $HOME/.aliases
fi

if exists "hub"; then alias git=hub; fi

if exists "gittower"; then alias tower='gittower `git rev-parse --show-toplevel`'; fi

if exists "fdfind"; then alias fd=fdfind; fi

alias vim=nvim
alias vi=nvim
alias edit="$EDITOR"

if exists "docker"; then
  alias dm=docker-machine
  alias dc=docker-compose
  alias docker-cleanup=docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm
fi

# -- Functions -----------------------------------------------------------------

# Extract archive based on file type
# Taken from http://justinlilly.com/dotfiles/zsh.html
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# -- Git -----------------------------------------------------------------------
zstyle ':completion:*:*:hub:*' user-commands ${${(M)${(k)commands}:#git-*}/git-/}
_git-delete-tag() { compadd "$@" $(git tag) }

if [ "$IS_VSCODE" ]; then
  git config core.editor "$EDITOR --wait"
fi

# -- Tmux ----------------------------------------------------------------------
export DISABLE_AUTO_TITLE="true"
alias tmux="tmux -2"

# -- TheFuck -------------------------------------------------------------------
#    https://github.com/nvbn/thefuck
alias fuck='$(thefuck $(fc -ln -1))'

# -- Add HOME bin to $PATH -----------------------------------------------------
[[ ":$PATH:" == *":$HOME/bin:"* ]] || PATH="$HOME/bin:$PATH"

# -- Add DOTFILES bin to PATH --------------------------------------------------
[[ ":$PATH:" == *":$DOTFILES/bin:"* ]] || PATH="$DOTFILES/bin:$PATH"

# -- Xiki ----------------------------------------------------------------------
if [[ -f "$HOME/.xsh" ]]; then
  source $HOME/.xsh
fi

# -- fzf -----------------------------------------------------------------------
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
  export FZF_TMUX=1
  export FZF_DEFAULT_OPTS='--color 16,info:6'
  if exists "fdfind"; then
    export FZF_DEFAULT_COMMAND="fdfind --type file --follow --hidden --exclude .git"
  else
    export FZF_DEFAULT_COMMAND="fd --type file --follow --hidden --exclude .git"
  fi
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# -- OS-Specific Config --------------------------------------------------------
if [[ $(uname) == 'Darwin' ]]; then
  # Load OSX config
  source $DOTFILES/zsh/zshrc.osx
fi

# -- asdf ---------------------------------------------------------------------

if exists "asdf"; then
  # ASDF is cloned manually into home directory
  if [[ -d "$HOME/.asdf/.git" ]]; then
    export ASDF_DIR="$HOME/.asdf"
  fi

  # ASDF is installed through Homebrew
  if [[ -d "/usr/local/opt/asdf" ]]; then
    export ASDF_DIR="/usr/local/opt/asdf"
  fi

  export ASDF_DATA_DIR="$HOME/.asdf"

  source $ASDF_DIR/asdf.sh
fi

# -- Yarn ---------------------------------------------------------------------
# Add manually-installed `yarn` to $PATH if necessary
if [[ -d "$HOME/.yarn/bin" ]]; then
  [[ ":$PATH:" == *":$HOME/.yarn/bin:"* ]] || PATH="$HOME/.yarn/bin:$PATH"
fi

# Make the shell aware of global packages installed by Yarn
local yarn_global_modules="$XDG_CONFIG_HOME/yarn/global/node_modules"
if [[ -d "$yarn_global_modules/.bin" && ":$PATH:" != *":$yarn_global_modules/.bin:"* ]]; then
  export PATH="$PATH:$yarn_global_modules/.bin"
fi

# -- Go ------------------------------------------------------------------------
# Add $GOTPATH/bin to the $PATH
export GOPATH=$HOME/Code/go
[[ ":$PATH:" == *":$GOPATH/bin:"* ]] || PATH="$PATH:$GOPATH/bin"

# -- Kubectl
if exists "kubectl"; then
  source <(kubectl completion zsh)
fi

# -- Local Configuration (After Default) ---------------------------------------
if [[ -f "$DOTFILES/zsh/zshrc.local" ]]; then
  source $DOTFILES/zsh/zshrc.local
fi
