[user]
  editor = /usr/local/bin/nvim
  email = alex@lafroscia.com
  name = Alex LaFroscia

[alias]
  # Add
  aa = add --all

  # Remove
  unstage = reset HEAD
  apply-gitignore = !git ls-files -ci --exclude-standard -z | xargs -0 git rm --cached

  # Commit
  cm = commit -m
  ca = commit --amend -m
  amend = commit --amend --no-edit
  fix = amend

  # Checkout
  co = checkout
  cb = checkout -b

  # Cherry-pick
  cp = cherry-pick

  # Diff
  df = diff
  dc = diff --cached

  # History
  # See the history for a particular file
  history = log --follow

  # List
  tl = tag -l
  bl = branch -a
  rl = remote -v

  # Status
  st = status -s

  # Pull
  pl   = pull
  plo  = pull --rebase origin
  plom = pull --rebase origin master
  plu  = pull --rebase upstream
  plum = pull --rebase upstream master

  # Push
  pf   = push --force-with-lease

  # Logs
  head = !git r -1
  h = !git head
  r = !GIT_NO_PAGER=1 git l -30
  ra = !git r --all
  la = !git l --all
  hp = "!. $DOTFILES/git/githelpers && show_git_head"
  l = "!. $DOTFILES/git/githelpers && pretty_git_log"

  # Sync
  sync = plu && pso

  # REKT
  rekt = reset --hard HEAD

  # Web
  web = instaweb --httpd=webrick

  # Clean up local branches with deleted remotes
  # https://www.erikschierboom.com/2020/02/17/cleaning-up-local-git-branches-deleted-on-a-remote/
  gone = ! "git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D"

[color]
  pager = true
  ui = auto
  status = auto
  diff = auto
  branch = auto
  showBranch = auto
  interactive = auto
  grep = auto
[color "status"]
  header = black bold
  branch = cyan
  nobranch = red
  unmerged = red
  untracked = cyan
  added = cyan
  changed = red
[color "diff"]
  meta = red bold
  frag = black bold
  func = blue
  old = red strike
  new = cyan
  commit = blue
  whitespace = red
  context = normal
[color "branch"]
  current = cyan
  local = blue
  remote = magenta
  upstream = magenta
  plain = normal
[color "decorate"]
  branch = blue
  remoteBranch = magenta
  tag = magenta
  stash = cyan
  HEAD = blue
[color "interactive"]
  prompt = red
  header = red bold
  error = red
  help = black bold
[color "grep"]
  context = normal
  match = cyan
  filename = blue
  function = blue
  selected = normal
  separator = red bold
  linenumber = normal

[pull]
  ff = only
  rebase = true

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking
  # Automatically create a non-existant remote branch when pushing
  # for the first time; no more `--set-upstream origin $BRANCH`
  autoSetupRemote = true

[diff]
  tool = Kaleidoscope
[difftool]
  prompt = false
[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[merge]
  tool = Kaleidoscope
[mergetool]
  prompt = false
[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" \"$REMOTE\"

[core]
  excludesfile = ~/.gitignore_global
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true
  plus-style = syntax "#012800"
  minus-style = normal "#340001"

[rerere]
  enabled = 1

[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true

[github]
  user = alexlafroscia

[credential]
  helper = osxkeychain

[init]
  defaultBranch = main

# Sign commits using key from 1Password
# Requires user/signingkey setting; see 1Password config recommendations
[commit]
  gpgsign = true
[gpg]
  format = ssh
[gpg "ssh"]
  program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"